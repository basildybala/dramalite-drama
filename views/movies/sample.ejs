<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Form</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css">
</head>
<style>
    .autocomplete-results {
    position: absolute;
    background-color: white;
    max-height: 150px;
    overflow-y: auto;
    z-index: 1000;
    width: 100%;
    margin-top: 5px; /* Add some spacing below the input */
}

.autocomplete-item {
    padding: 8px;
    cursor: pointer;
}

.autocomplete-item:hover {
    background-color: #f0f0f0;
}
</style>
<body>
    <div class="container mt-4">
        <form id="actorForm">
            <div id="formContainer">
                <div class="form-group mb-3">
                    <label for="name">Actor</label>
                    <div class="input-group">
                        <input type="text" class="form-control" name="actid" placeholder="ID">
                        <input type="text" class="form-control" name="celeblink" placeholder="Celeb Link">
                        <div>
                            <input type="text" class="form-control actor-name-input" name="actorname" placeholder="Name">
                            <div class="autocomplete-results"></div> <!-- Container for search results -->
                        </div>
                        
                    </div>
                    
                    <div class="input-group mt-2">
                        <input type="text" class="form-control" name="actimg" placeholder="Img Url">
                        <input type="text" class="form-control" name="mvactorname" placeholder="Mv Name">
                        <input type="text" class="form-control" name="mvrole" placeholder="Mv Role">
                    </div>
                    <button type="button" class="btn btn-danger mt-2 remove-btn">Remove</button>
                </div>
            </div>
            <button type="button" id="addBtn" class="btn btn-success">Add Actor</button>
            <button type="submit" class="btn btn-primary mt-3">Submit</button>
        </form>
        <pre id="output" class="mt-4"></pre>
    </div>

    <script>
   document.addEventListener('DOMContentLoaded', function () {
    const formContainer = document.getElementById('formContainer');
    const actorForm = document.getElementById('actorForm');

    // Event delegation for dynamically added input fields
    formContainer.addEventListener('input', function (event) {
        if (event.target.classList.contains('actor-name-input')) {
            const query = event.target.value;
            const resultsContainer = event.target.closest('.input-group').querySelector('.autocomplete-results');

            if (query.length > 2) { // Only search if the query is longer than 2 characters
                fetch(`/celebs/search-actors?q=${encodeURIComponent(query)}`)
                    .then(response => response.json())
                    .then(data => {
                        console.log('API Response:', data); // Debugging: Log the API response

                        // Clear previous results
                        resultsContainer.innerHTML = '';

                        // Display new results
                        if (data.length > 0) {
                            data.forEach(actor => {
                                const resultItem = document.createElement('div');
                                resultItem.textContent = actor.actorname; // Use actor.actorname from the response
                                resultItem.classList.add('autocomplete-item');

                                // Add click event to populate the form fields
                                resultItem.addEventListener('click', () => {
                                    const formGroup = event.target.closest('.form-group');

                                    // Populate the input fields
                                    formGroup.querySelector('input[name="actorname"]').value = actor.actorname;
                                    formGroup.querySelector('input[name="actid"]').value = actor._id;
                                    formGroup.querySelector('input[name="celeblink"]').value = actor.celeblink;
                                    formGroup.querySelector('input[name="actimg"]').value = actor.profilePic;

                                    // Clear the dropdown results
                                    resultsContainer.innerHTML = '';
                                });

                                resultsContainer.appendChild(resultItem);
                            });
                        } else {
                            resultsContainer.innerHTML = '<div class="autocomplete-item">No results found</div>';
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching actors:', error); // Debugging: Log any errors
                        resultsContainer.innerHTML = '<div class="autocomplete-item">Error loading results</div>';
                    });
            } else {
                resultsContainer.innerHTML = ''; // Clear results if the query is too short
            }
        }
    });

    // Add new actor form group
    document.getElementById('addBtn').addEventListener('click', function () {
        const newFormGroup = formContainer.firstElementChild.cloneNode(true);
        newFormGroup.querySelectorAll('input').forEach(input => input.value = ''); // Clear input values
        formContainer.appendChild(newFormGroup);
    });

    // Remove actor form group
    formContainer.addEventListener('click', function (event) {
        if (event.target.classList.contains('remove-btn')) {
            event.target.closest('.form-group').remove();
        }
    });

    // Handle form submission
    actorForm.addEventListener('submit', function (event) {
        event.preventDefault();

        // Collect data from all actor form groups
        const actors = [];
        const formGroups = formContainer.querySelectorAll('.form-group');

        formGroups.forEach(formGroup => {
            const actor = {
                _id: formGroup.querySelector('input[name="actid"]').value,
                actorname: formGroup.querySelector('input[name="actorname"]').value,
                celeblink: formGroup.querySelector('input[name="celeblink"]').value,
                profilePic: formGroup.querySelector('input[name="actimg"]').value,
                mvactorname: formGroup.querySelector('input[name="mvactorname"]').value, // Include mvactorname
                mvrole: formGroup.querySelector('input[name="mvrole"]').value // Include mvrole
            };
            actors.push(actor);
        });

        console.log('Form Data:', actors); // Debugging: Log the collected data

        // Send the data to the API
        fetch('/devadmin/sample', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(actors)
        })
            .then(response => response.json())
            .then(data => {
                console.log('API Response:', data); // Debugging: Log the API response
                alert('Data submitted successfully!');
            })
            .catch(error => {
                console.error('Error submitting data:', error); // Debugging: Log any errors
                alert('Error submitting data. Please try again.');
            });
    });
});
    </script>
</body>
</html>
