<%- include('../partials/admin-header'); -%>
<link rel="stylesheet" href="/css/auth.css">
<title>Add movie -Dramalite</title>
<meta name="description" content="Malayalam Movies and Tamil Telugu Hindi Webseries  Release Date Reviews Videos  Cast & Crew  Film Poster">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
        integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <link rel="stylesheet" href="css/auth.css">

<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
</html>

<style>
     .blue-header {
            width: 100%;
            height: 35px; /* Fixed height */
            /* background-color: #4fa0f7; */
            background-color: #0050C2; /* Blue color */
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 15px;
            color: white;
        }

        /* Heading */
        .blue-header-heading h1 {
            font-size: 16px;
            font-weight: bold;
            font-family: 'Varela Round', sans-serif;
        }
    .sortable-ghost {
    background: #f8d7da; /* Light red background while dragging */
    opacity: 0.7;
    }
    .sortable-chosen {
        background: #cce5ff; /* Light blue background when selected */
    }
    .autocomplete-results {
    position: absolute;
    background-color: white;
    max-height: 150px;
    overflow-y: auto;
    z-index: 1000;
    width: 100%;
    margin-top: 5px; /* Add some spacing below the input */
}

.autocomplete-item {
    padding: 8px;
    cursor: pointer;
}

.autocomplete-item:hover {
    background-color: #f0f0f0;
}

</style>
<body>
    <div class="movie-container">
        <div class="blue-header">
            <h1>
                <%= movie.name %>
            </h1>
        </div>
    </div>
    <div class="container mt-2">
        <form id="actorForm">
            <div id="formContainer">
                <% if (actors && actors.length > 0) { %>
                <% for(var i=0; i<actors?.length; i++){%>
                <div class="form-group mb-3">
                    <label for="name">Actor</label>
                    <div class="input-group">
                        <input type="text" class="form-control" name="actid" placeholder="ID" hidden value="<%= actors[i].actorid._id %>">
                        <input type="text" class="form-control" name="celeblink" placeholder="Celeb Link" hidden>
                        <div style="width: 15%;">
                            <input type="text" class="form-control position-input" name="position" value="<%= actors[i].position %>">
                        </div>
                        <div style="width: 85%;">
                            <input type="text" class="form-control actor-name-input" name="actorname" placeholder="Name" value="<%= actors[i].actorid.actorname %>">
                            <div class="autocomplete-results"></div> <!-- Container for search results -->
                        </div>
                        
                    </div>
                    
                    <div class="input-group mt-2">
                        <input type="text" class="form-control" name="actimg" placeholder="Img Url" hidden>
                        <input type="text" class="form-control" name="actordramaname" placeholder="Mv Name" value="<%= actors[i].actordramaname %>">
                        <select class="form-control" name="actorrole" >
                            <option value="<%= actors[i].actorrole %>"><%= actors[i].actorrole %></option>
                            <option value="Main Role">Main Role</option>
                            <option value="Support Role">Support Role</option>
                            <option value="Guest Role">Guest Role</option>
                        </select>
                        <button type="button" class="btn btn-danger  remove-btn">Remove</button>
                    </div>
                    <div class="input-group mt-2">
                        <input type="text" class="form-control" name="description" placeholder="Description" value="<%= actors[i].description %>">
                    </div>
                </div>
                <% } %>
                <% } else { %>
                            <!-- Default empty form group -->
                    <div class="form-group mb-3">
                        <label for="name">Actor</label>
                        <div class="input-group">
                            <input type="text" class="form-control" name="actid" placeholder="ID" hidden>
                            <input type="text" class="form-control" name="celeblink" placeholder="Celeb Link" hidden>
                            <div style="width: 15%;">
                                <input type="text" class="form-control position-input" name="position" value="1">
                            </div>
                            <div style="width: 85%;">
                                <input type="text" class="form-control actor-name-input" name="actorname" placeholder="Name">
                                <div class="autocomplete-results"></div>
                            </div>
                        </div>
                        <div class="input-group mt-2">
                            <input type="text" class="form-control" name="actimg" placeholder="Img Url" hidden>
                            <input type="text" class="form-control" name="actordramaname" placeholder="Mv Name">
                            <select class="form-control" name="actorrole">
                                <option value="Main Role">Main Role</option>
                                <option value="Support Role">Support Role</option>
                                <option value="Guest Role">Guest Role</option>
                            </select>
                            <button type="button" class="btn btn-danger remove-btn">Remove</button>
                        </div>
                        <div class="input-group mt-2">
                            <input type="text" class="form-control" name="description" placeholder="Description">
                        </div>
                    </div>
                <% } %>
            </div>
            <button type="button" id="addBtn" class="btn btn-success">Add Actor</button>
            <br>
            <button type="submit" class="btn btn-primary mt-3">Submit</button>
        </form>
        <pre id="output" class="mt-4"></pre>
    </div>

    <script>
    document.addEventListener("DOMContentLoaded", function() {
        let actorContainer = document.getElementById("formContainer");

        let sortable = new Sortable(actorContainer, {
            animation: 150,
            ghostClass: "sortable-ghost",
            handle: ".form-group",
            chosenClass: "sortable-chosen",
            onEnd: function () {
                updatePositions(); // Update positions after drag ends
            }
        });

        function updatePositions() {
            document.querySelectorAll("#formContainer .form-group").forEach((item, index) => {
                item.querySelector(".position-input").value = index + 1; // Set position number
            });
        }

        // Initialize positions on page load
        updatePositions();
    });

   document.addEventListener('DOMContentLoaded', function () {
    const formContainer = document.getElementById('formContainer');
    const actorForm = document.getElementById('actorForm');

    // Event delegation for dynamically added input fields
    formContainer.addEventListener('input', function (event) {
        if (event.target.classList.contains('actor-name-input')) {
            const query = event.target.value;
            const resultsContainer = event.target.closest('.input-group').querySelector('.autocomplete-results');

            if (query.length > 2) { // Only search if the query is longer than 2 characters
                fetch(`/celebs/search-actors?q=${encodeURIComponent(query)}`)
                    .then(response => response.json())
                    .then(data => {
                        console.log('API Response:', data); // Debugging: Log the API response

                        // Clear previous results
                        resultsContainer.innerHTML = '';

                        // Display new results
                        if (data.length > 0) {
                            data.forEach(actor => {
                                const resultItem = document.createElement('div');
                                resultItem.textContent = actor.actorname; // Use actor.actorname from the response
                                resultItem.classList.add('autocomplete-item');

                                // Add click event to populate the form fields
                                resultItem.addEventListener('click', () => {
                                    const formGroup = event.target.closest('.form-group');

                                    // Populate the input fields
                                    formGroup.querySelector('input[name="actorname"]').value = actor.actorname;
                                    formGroup.querySelector('input[name="actid"]').value = actor._id;
                                    formGroup.querySelector('input[name="celeblink"]').value = actor.celeblink;
                                    formGroup.querySelector('input[name="actimg"]').value = actor.profilePic;

                                    // Clear the dropdown results
                                    resultsContainer.innerHTML = '';
                                });

                                resultsContainer.appendChild(resultItem);
                            });
                        } else {
                            resultsContainer.innerHTML = '<div class="autocomplete-item">No results found</div>';
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching actors:', error); // Debugging: Log any errors
                        resultsContainer.innerHTML = '<div class="autocomplete-item">Error loading results</div>';
                    });
            } else {
                resultsContainer.innerHTML = ''; // Clear results if the query is too short
            }
        }
    });

    // Add new actor form group
    document.getElementById('addBtn').addEventListener('click', function () {
        const newFormGroup = formContainer.firstElementChild.cloneNode(true);
        newFormGroup.querySelectorAll('input').forEach(input => input.value = ''); // Clear input values
        formContainer.appendChild(newFormGroup);
    });

    // Remove actor form group
    formContainer.addEventListener('click', function (event) {
        if (event.target.classList.contains('remove-btn')) {
            event.target.closest('.form-group').remove();
        }
    });

    // Handle form submission
    actorForm.addEventListener('submit', function (event) {
        event.preventDefault();

        // Collect data from all actor form groups
        const actors = [];
        const formGroups = formContainer.querySelectorAll('.form-group');

        formGroups.forEach(formGroup => {
            const actor = {
            actorid: formGroup.querySelector('input[name="actid"]').value,
            // actorname: formGroup.querySelector('input[name="actorname"]').value,
            // celeblink: formGroup.querySelector('input[name="celeblink"]').value,
            // profilePic: formGroup.querySelector('input[name="actimg"]').value,
            actordramaname: formGroup.querySelector('input[name="actordramaname"]').value, // Include actordramaname
            actorrole: formGroup.querySelector('select[name="actorrole"]').value, // Corrected to actorrole
            position: formGroup.querySelector('input[name="position"]').value, // Corrected to position
            description: formGroup.querySelector('input[name="description"]').value // Corrected to position
        };

        actors.push(actor);
    });

        console.log('Form Data:', actors); // Debugging: Log the collected data

        // Send the data to the API
        fetch('/devadmin/map-celebrity/<%= movie._id %>', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(actors)
        })
            .then(response => response.json())
            .then(data => {
                console.log('API Response:', data); // Debugging: Log the API response
                window.location.replace(`/drama/<%= movie.dramalink %>`)
            })
            .catch(error => {
                console.error('Error submitting data:', error); // Debugging: Log any errors
                alert('Error submitting data. Please try again.');
            });
    });
});
    </script>
</body>
</html>
